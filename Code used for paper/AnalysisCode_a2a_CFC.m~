%--------------------------------------------------------------------------
% Author: Akira Nagamori
% Last update: 9/23/2018
% Descriptions:
%   Amplitude-to-amplitude cross-frequency coupling
%   Method adopted from Bruns & Eckhorn (2004)
%--------------------------------------------------------------------------


close all
clear all
clc

Fs = 1000;

endTime = 50*Fs;
t = [1:50*Fs]./Fs;

subjectNo = 1:12;


[b_f_low,a_f_low] = butter(4,5/(Fs/2),'low');

count = 1;


for j = 1 %:2
    for k = 2 %:2:4
        for i = 1:length(subjectNo)
            index_Sub = subjectNo(i);
            if index_Sub < 10
                subjectID = ['20' num2str(index_Sub)];
            else
                subjectID = ['2' num2str(index_Sub)];
            end
            dataDirectory = ['/Users/akiranagamori/Documents/GitHub/Tendon-Stiffness-Experiment/Subject' subjectID '/'];
            codeDirectory = '/Users/akiranagamori/Documents/GitHub/Tendon-Stiffness-Experiment/Code used for paper';
            
            if j == 1
                condition = ['Fl_' num2str(k)];
                muscle = 1:2;
                muscle_ant = 3:4;
            else
                condition = ['Ex_' num2str(k)];
                muscle = 3:4;
                muscle_ant = 1:2;
            end
            
            cd (dataDirectory)
            load ([condition '_Data'])
            Data_temp = Data;
            cd (codeDirectory)
            
            Force = Data_temp(:,end);
            Force = Force - mean(Force);
            EMG_1 = Data_temp(:,muscle(1));
            EMG_1 = EMG_1-mean(EMG_1);
            EMG_2 = Data_temp(:,muscle(2));
            EMG_2 = EMG_2-mean(EMG_2);
            
            % Data processing for force signal 
            Force_low = filtfilt(b_f_low,a_f_low,Force); % apply low-pass filter at 5Hz
            Force_phase = hilbert(Force_low-mean(Force_low)); % apply hilbert transform
            Force_amp = abs(Force_phase); % calculate amplitude
            Force_amp = Force_amp - mean(Force_amp);  % remove mean
            
            % Data processing for alpha-band coherence
            [time,freqs,Coh] = waveletCoherence(EMG_1,EMG_2,Fs,0.5:0.5:100,5); % wavelet coherence
            
            Coh_alpha = mean(atanh(sqrt(Coh(16:30,:)))); % average coherence between 8-15 Hz
            Coh_alpha = Coh_alpha - mean(Coh_alpha); % remove mean      
            phase_Coh_alpha = hilbert(Coh_alpha); % apply hilbert transform
            amp_Coh_alpha = abs(phase_Coh_alpha); % calculate amplitude
            amp_Coh_alpha = amp_Coh_alpha - mean(amp_Coh_alpha); % remove mean
            % amplitude-to-amplitude cross-freqeuncy coupling
            rho(count,i) = corr(Force_amp,amp_Coh_alpha'); % pearson's correlation coefficient                   
            [r(),lag] = xcorr(Force_amp,amp_Coh_alpha',1000,'coeff');
            
        end
        count = count + 1;
    end
    
      
   
end

rho_plot = [rho(2,:); rho(1,:); rho(4,:); rho(3,:)];

figure(1)
boxplot(rho_plot')
ylabel('Correlation Coefficient','FontSize',14)
legend('High Gain','Low Gain')
set(gca,'TickDir','out')


